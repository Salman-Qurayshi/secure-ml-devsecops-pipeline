pipeline {
  agent any

  environment {
    IMAGE_NAME = "ml-flask-app"
    COMMIT_SHA = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    IMAGE_TAG  = "${IMAGE_NAME}:${COMMIT_SHA}"
    PYTHON     = "${WORKSPACE}/.ci-venv/bin/python"
    PIP        = "${WORKSPACE}/.ci-venv/bin/pip"
    PATH = "${WORKSPACE}/ci-tools:/usr/local/bin:/usr/bin:/bin:${env.PATH}"
  }

  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '20'))
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Set up Tools') {
      steps {
        sh '''
          # Python virtualenv
          python3 -m venv .ci-venv
          . .ci-venv/bin/activate
          ${PIP} install --upgrade pip
          ${PIP} install -r requirements.txt || true
          ${PIP} install black flake8 bandit pip-audit

          # Create ci-tools folder
          mkdir -p ci-tools

          # ---------------------------
          # Gitleaks
          # ---------------------------
          if [ ! -f ci-tools/gitleaks ]; then
            echo "Installing Gitleaks..."
            curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 \
              -o ci-tools/gitleaks
            chmod +x ci-tools/gitleaks
          fi

          # ---------------------------
          # Trivy
          # ---------------------------
          if [ ! -f ci-tools/trivy ]; then
            echo "Installing Trivy..."
            curl -sSL https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.52.2_Linux-64bit.tar.gz \
              -o ci-tools/trivy.tar.gz
            tar -xzf ci-tools/trivy.tar.gz -C ci-tools trivy
            chmod +x ci-tools/trivy
            rm ci-tools/trivy.tar.gz
          fi

          # ---------------------------
          # Syft
          # ---------------------------
          if [ ! -f ci-tools/syft ]; then
            echo "Installing Syft..."
            curl -sSL https://github.com/anchore/syft/releases/latest/download/syft_Linux_x86_64.tar.gz \
              -o ci-tools/syft.tar.gz
            tar -xzf ci-tools/syft.tar.gz -C ci-tools syft
            chmod +x ci-tools/syft
            rm ci-tools/syft.tar.gz
          fi
        '''
      }
    }

    stage('Lint & SAST') {
      steps {
        sh '''
          . .ci-venv/bin/activate
          ${PYTHON} -m black --check . || true
          ${PYTHON} -m flake8 . --exit-zero
          bandit -c security/bandit-config.yaml -r . --exit-zero
        '''
      }
    }

    stage('Dependency Scan (pip-audit)') {
      steps {
        sh '''
          . .ci-venv/bin/activate
          pip-audit -r requirements.txt -f json -o ci-cd/pip-audit.json || true
        '''
      }
      post {
        always {
          script {
            if (fileExists('ci-cd/pip-audit.json')) {
              archiveArtifacts artifacts: 'ci-cd/pip-audit.json', onlyIfSuccessful: false
            } else {
              echo "⚠️ pip-audit.json not generated. Skipping archive."
            }
          }
        }
      }
    }

    stage('Secrets Scan (gitleaks)') {
      steps {
        sh '''
          mkdir -p ci-cd
          ./ci-tools/gitleaks detect \
            --config security/.gitleaks.toml \
            --report-path ci-cd/gitleaks.json \
            --report-format json \
            --verbose \
            --no-exit-code || true
        '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'ci-cd/gitleaks.json', onlyIfSuccessful: false
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        sh '''
          docker build -t ${IMAGE_TAG} .
          docker image ls | head -n 5
        '''
      }
    }

    stage('Container Scan (Trivy)') {
      steps {
        sh '''
          ./ci-tools/trivy image --exit-code 0 --format json -o ci-cd/trivy-report.json ${IMAGE_TAG} || true
        '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'ci-cd/trivy-report.json', onlyIfSuccessful: false
        }
      }
    }

    stage('SBOM (Syft)') {
      steps {
        sh '''
          ./ci-tools/syft packages docker:${IMAGE_TAG} -o json > ci-cd/sbom.json || true
        '''
      }
      post {
        always {
          archiveArtifacts artifacts: 'ci-cd/sbom.json', onlyIfSuccessful: false
        }
      }
    }

    stage('(Optional) Docker Bench - Advisory') {
      when { expression { return false } } // flip to true when you want it
      steps {
        sh 'security/docker-bench.sh || true'
      }
      post {
        always {
          archiveArtifacts artifacts: 'ci-cd/docker-bench.txt', onlyIfSuccessful: false
        }
      }
    }

    stage('Deploy to Staging (VPS)') {
      when {
        anyOf {
          branch 'main'
          branch 'master'
        }
      }
      steps {
        sh '''
          docker compose pull || true
          docker compose down || true
          docker compose up -d || true
          docker ps
        '''
      }
    }
  }

  post {
    always {
      archiveArtifacts artifacts: 'ci-cd/*.json, ci-cd/*.txt', onlyIfSuccessful: false
    }
  }
}
